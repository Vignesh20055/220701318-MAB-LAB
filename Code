package com.example.app2

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import com.example.app2.ui.theme.App2Theme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            App2Theme {
                Surface(modifier = Modifier.fillMaxSize()) {
                    AttendanceScreen()
                }
            }
        }
    }
}

class Subject(name: String) {
    var name by mutableStateOf(name)
    var attended by mutableIntStateOf(0)
    var total by mutableIntStateOf(0)
    val percentage: Int
        get() = if (total == 0) 0 else (attended * 100) / total
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AttendanceScreen() {
    var newSubject by remember { mutableStateOf(TextFieldValue("")) }
    val subjects = remember { mutableStateListOf<Subject>() }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Attendance Tracker") }
            )
        },
        content = { padding ->
            Column(
                modifier = Modifier
                    .padding(padding)
                    .padding(16.dp)
                    .fillMaxSize()
            ) {
                OutlinedTextField(
                    value = newSubject,
                    onValueChange = { newSubject = it },
                    label = { Text("Subject Name") },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(8.dp))

                Button(
                    onClick = {
                        val name = newSubject.text.trim()
                        if (name.isNotEmpty()) {
                            subjects.add(Subject(name))
                            newSubject = TextFieldValue("")
                        }
                    },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Add Subject")
                }

                Spacer(modifier = Modifier.height(16.dp))

                LazyColumn(
                    modifier = Modifier
                        .weight(1f)
                        .fillMaxWidth()
                ) {
                    items(subjects) { subject ->
                        SubjectCard(subject = subject)
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                TotalAttendanceSummary(subjects)
            }
        }
    )
}

@Composable
fun SubjectCard(subject: Subject) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 6.dp),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = subject.name, style = MaterialTheme.typography.titleMedium)
            Text(
                text = "Attendance: ${subject.attended}/${subject.total} (${subject.percentage}%)",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(top = 4.dp)
            )

            if (subject.percentage <= 75 && subject.total > 0) {
                Text(
                    text = "⚠️ Low Attendance",
                    color = MaterialTheme.colorScheme.error,
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            Row(horizontalArrangement = Arrangement.SpaceEvenly) {
                Button(
                    onClick = {
                        subject.attended++
                        subject.total++
                    },
                    modifier = Modifier.weight(1f)
                ) {
                    Text("Present")
                }
                Spacer(modifier = Modifier.width(8.dp))
                Button(
                    onClick = {
                        subject.total++
                    },
                    modifier = Modifier.weight(1f)
                ) {
                    Text("Absent")
                }
            }
        }
    }
}

@Composable
fun TotalAttendanceSummary(subjects: List<Subject>) {
    val totalAttended = subjects.sumOf { it.attended }
    val totalClasses = subjects.sumOf { it.total }
    val totalPercentage = if (totalClasses == 0) 0 else (totalAttended * 100) / totalClasses

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("Total Attendance", style = MaterialTheme.typography.titleSmall)
            Text("$totalAttended / $totalClasses ($totalPercentage%)", style = MaterialTheme.typography.bodyMedium)
        }
    }
}
